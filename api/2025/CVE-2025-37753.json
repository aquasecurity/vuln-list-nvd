{
  "id": "CVE-2025-37753",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2025-05-01T13:15:54.050",
  "lastModified": "2025-05-02T13:53:20.943",
  "vulnStatus": "Awaiting Analysis",
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ns390/cpumf: Fix double free on error in cpumf_pmu_event_init()\n\nIn PMU event initialization functions\n - cpumsf_pmu_event_init()\n - cpumf_pmu_event_init()\n - cfdiag_event_init()\nthe partially created event had to be removed when an error was detected.\nThe event::event_init() member function had to release all resources\nit allocated in case of error. event::destroy() had to be called\non freeing an event after it was successfully created and\nevent::event_init() returned success.\n\nWith\n\ncommit c70ca298036c (\"perf/core: Simplify the perf_event_alloc() error path\")\n\nthis is not necessary anymore. The performance subsystem common\ncode now always calls event::destroy() to clean up the allocated\nresources created during event initialization.\n\nRemove the event::destroy() invocation in PMU event initialization\nor that function is called twice for each event that runs into an\nerror condition in event creation.\n\nThis is the kernel log entry which shows up without the fix:\n\n------------[ cut here ]------------\nrefcount_t: underflow; use-after-free.\nWARNING: CPU: 0 PID: 43388 at lib/refcount.c:87\trefcount_dec_not_one+0x74/0x90\nCPU: 0 UID: 0 PID: 43388 Comm: perf Not tainted 6.15.0-20250407.rc1.git0.300.fc41.s390x+git #1 NONE\nHardware name: IBM 3931 A01 704 (LPAR)\nKrnl PSW : 0704c00180000000 00000209cb2c1b88 (refcount_dec_not_one+0x78/0x90)\n           R:0 T:1 IO:1 EX:1 Key:0 M:1 W:0 P:0 AS:3 CC:0 PM:0 RI:0 EA:3\nKrnl GPRS: 0000020900000027 0000020900000023 0000000000000026 0000018900000000\n           00000004a2200a00 0000000000000000 0000000000000057 ffffffffffffffea\n           00000002b386c600 00000002b3f5b3e0 00000209cc51f140 00000209cc7fc550\n           0000000001449d38 ffffffffffffffff 00000209cb2c1b84 00000189d67dfb80\nKrnl Code: 00000209cb2c1b78: c02000506727\tlarl\t%r2,00000209cbcce9c6\n           00000209cb2c1b7e: c0e5ffbd4431\tbrasl\t%r14,00000209caa6a3e0\n          #00000209cb2c1b84: af000000\t\tmc\t0,0\n          \u003e00000209cb2c1b88: a7480001\t\tlhi\t%r4,1\n           00000209cb2c1b8c: ebeff0a00004\tlmg\t%r14,%r15,160(%r15)\n           00000209cb2c1b92: ec243fbf0055\trisbg\t%r2,%r4,63,191,0\n           00000209cb2c1b98: 07fe\t\tbcr\t15,%r14\n           00000209cb2c1b9a: 47000700\t\tbc\t0,1792\nCall Trace:\n [\u003c00000209cb2c1b88\u003e] refcount_dec_not_one+0x78/0x90\n [\u003c00000209cb2c1dc4\u003e] refcount_dec_and_mutex_lock+0x24/0x90\n [\u003c00000209caa3c29e\u003e] hw_perf_event_destroy+0x2e/0x80\n [\u003c00000209cacaf8b4\u003e] __free_event+0x74/0x270\n [\u003c00000209cacb47c4\u003e] perf_event_alloc.part.0+0x4a4/0x730\n [\u003c00000209cacbf3e8\u003e] __do_sys_perf_event_open+0x248/0xc20\n [\u003c00000209cacc14a4\u003e] __s390x_sys_perf_event_open+0x44/0x50\n [\u003c00000209cb8114de\u003e] __do_syscall+0x12e/0x260\n [\u003c00000209cb81ce34\u003e] system_call+0x74/0x98\nLast Breaking-Event-Address:\n [\u003c00000209caa6a4d2\u003e] __warn_printk+0xf2/0x100\n---[ end trace 0000000000000000 ]---"
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: s390/cpumf: Se corrige la doble liberación en caso de error en cpumf_pmu_event_init(). En las funciones de inicialización de eventos de PMU (cpumsf_pmu_event_init(), cpumf_pmu_event_init() y cfdiag_event_init()), el evento parcialmente creado debía eliminarse al detectarse un error. La función miembro event::event_init() debía liberar todos los recursos asignados en caso de error. Event::destroy() debía llamarse al liberar un evento después de su creación exitosa y event::event_init() devolvía la operación correcta. Con la confirmación c70ca298036c (\"perf/core: Simplificar la ruta de error de perf_event_alloc()\"), esto ya no es necesario. El código común del subsistema de rendimiento ahora siempre llama a event::destroy() para limpiar los recursos asignados creados durante la inicialización del evento. Elimine la invocación de event::destroy() en la inicialización de eventos de PMU, ya que dicha función se llama dos veces por cada evento que presenta una condición de error durante su creación. Esta es la entrada del registro del kernel que aparece sin la corrección: ------------[ cortar aquí ]------------ refcount_t: underflow; use-after-free. ADVERTENCIA: CPU: 0 PID: 43388 en lib/refcount.c:87 refcount_dec_not_one+0x74/0x90 CPU: 0 UID: 0 PID: 43388 Comm: perf No contaminado 6.15.0-20250407.rc1.git0.300.fc41.s390x+git #1 NINGUNO Nombre del hardware: IBM 3931 A01 704 (LPAR) Krnl PSW : 0704c00180000000 00000209cb2c1b88 (refcount_dec_not_one+0x78/0x90) R:0 T:1 IO:1 EX:1 Key:0 M:1 W:0 P:0 AS:3 CC:0 PM:0 RI:0 EA:3 Krnl GPRS: 0000020900000027 0000020900000023 0000000000000026 0000018900000000 00000004a2200a00 0000000000000000 0000000000000057 ffffffffffffffea 00000002b386c600 00000002b3f5b3e0 00000209cc51f140 00000209cc7fc550 0000000001449d38 ffffffffffffffff 00000209cb2c1b84 00000189d67dfb80 Krnl Code: 00000209cb2c1b78: c02000506727 larl %r2,00000209cbcce9c6 00000209cb2c1b7e: c0e5ffbd4431 brasl %r14,00000209caa6a3e0 #00000209cb2c1b84: af000000 mc 0,0 \u0026gt;00000209cb2c1b88: a7480001 lhi %r4,1 00000209cb2c1b8c: ebeff0a00004 lmg %r14,%r15,160(%r15) 00000209cb2c1b92: ec243fbf0055 risbg %r2,%r4,63,191,0 00000209cb2c1b98: 07fe bcr 15,%r14 00000209cb2c1b9a: 47000700 bc 0,1792 Call Trace: [\u0026lt;00000209cb2c1b88\u0026gt;] refcount_dec_not_one+0x78/0x90 [\u0026lt;00000209cb2c1dc4\u0026gt;] refcount_dec_and_mutex_lock+0x24/0x90 [\u0026lt;00000209caa3c29e\u0026gt;] hw_perf_event_destroy+0x2e/0x80 [\u0026lt;00000209cacaf8b4\u0026gt;] __free_event+0x74/0x270 [\u0026lt;00000209cacb47c4\u0026gt;] perf_event_alloc.part.0+0x4a4/0x730 [\u0026lt;00000209cacbf3e8\u0026gt;] __do_sys_perf_event_open+0x248/0xc20 [\u0026lt;00000209cacc14a4\u0026gt;] __s390x_sys_perf_event_open+0x44/0x50 [\u0026lt;00000209cb8114de\u0026gt;] __do_syscall+0x12e/0x260 [\u0026lt;00000209cb81ce34\u0026gt;] system_call+0x74/0x98 Last Breaking-Event-Address: [\u0026lt;00000209caa6a4d2\u0026gt;] __warn_printk+0xf2/0x100 ---[ fin de seguimiento 0000000000000000 ]---"
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/3a3faf873db5dcd5d2622d8e2accb90af0a86c2d",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/aa1ac98268cd1f380c713f07e39b1fa1d5c7650c",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/bdbecb2bf531fadbbc9347a79009f7a58ea7eb03",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/ddf60c1491102dab04491481bc3376d3e9cd139d",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}